import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
	static Node[] nodes;
	static int N, M;
	static class Node implements Comparable<Node> {
		int vertex, weight;
		Node next;
		
		public Node(int vertex, int weight) {
			this.vertex = vertex;
			this.weight = weight;
		}

		public Node(int vertex, int weight, Node next) {
			this.vertex = vertex;
			this.weight = weight;
			this.next = next;
		}

		public int compareTo(Node o) {
			return Integer.compare(this.weight, o.weight);
		}
	}
	public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        StringTokenizer st;
        
        int testCase = Integer.parseInt(br.readLine());
        for(int T = 1; T <= testCase; T++) {
        	sb.append("Case #").append(T).append(": ");
        	
        	st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            M = Integer.parseInt(st.nextToken());

            nodes = new Node[M];

            for(int i = 0; i < N; i++) {
            	st = new StringTokenizer(br.readLine());
            	
            	int x = Integer.parseInt(st.nextToken());
            	int y = Integer.parseInt(st.nextToken());
            	int z = Integer.parseInt(st.nextToken());
            	
            	nodes[x] = new Node(y, z, nodes[x]); 
            	nodes[y] = new Node(x, z, nodes[y]); 
            }
            
            sb.append(dijkstra(0, M - 1)).append("\n");
        }
        System.out.print(sb);
	}
	public static String dijkstra(int start, int end) {
        StringBuilder sb = new StringBuilder();
        
		int cnt = 0;
		boolean[] visited = new boolean[M];
        int[][] minValue = new int[M][2];
        
        for(int i = 0; i < M; i++) {
        	minValue[i][0] = Integer.MAX_VALUE;
        	minValue[i][1] = -1;
        }
        
        minValue[start][0] = 0;
        minValue[start][1] = -1;
        
        PriorityQueue<Node> pq = new PriorityQueue<>();
        pq.add(new Node(start, minValue[start][0]));
        
        Node cur;
        while(!pq.isEmpty()) {
    		cur = pq.remove();
    		
    		if(visited[cur.vertex]) continue;
    		visited[cur.vertex] = true;
    		
    		if(++cnt == M) break;
    		
    		for(Node tmp = nodes[cur.vertex]; tmp != null; tmp = tmp.next) {
    			if(visited[tmp.vertex]) continue;
    			if(minValue[cur.vertex][0] + tmp.weight >= minValue[tmp.vertex][0]) continue;
    			
    			minValue[tmp.vertex][0] = minValue[cur.vertex][0] + tmp.weight;
    			minValue[tmp.vertex][1] = cur.vertex;	
    			
    			pq.add(new Node(tmp.vertex, minValue[tmp.vertex][0]));
    		}
    	}
        
        if(minValue[end][0] == Integer.MAX_VALUE) {
            return "-1";
        } else {
            Stack<Integer> path = new Stack<>();
            int now = end;
            
            while(now != -1) {
                path.push(now);
                now = minValue[now][1];
            }

            StringBuilder result = new StringBuilder();
            while(!path.isEmpty()) {
                result.append(path.pop()).append(" ");
            }

            return result.toString().trim();
        }
	}
}
